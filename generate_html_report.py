import os
import json
from datetime import datetime
from pathlib import Path
from collections import Counter

# === Paths ===
script_path = Path(__file__).resolve()
base_path = script_path.parent.parent
data_dir = base_path / "data"
html_path = base_path / "reports" / "preview_threat_report.html"
html_path.parent.mkdir(exist_ok=True)

# === Get Latest Feed Files ===
def get_latest_file(prefix):
    files = sorted(data_dir.glob(f"{prefix}_*.json"), key=os.path.getmtime, reverse=True)
    return files[0] if files else None

def load_json(filepath):
    if not filepath:
        return []
    with open(filepath, "r", encoding="utf-8") as f:
        return json.load(f)

# === Load Feeds ===
otx_data = load_json(get_latest_file("otx"))
tf_data = load_json(get_latest_file("threatfox"))
abuse_data = load_json(get_latest_file("abuseipdb"))

# === Parse for Summary ===
def parse_otx(data):
    return [{
        "source": "OTX",
        "malware_family": pulse.get("malware_family", "Unknown"),
        "tags": pulse.get("tags", []),
        "references": pulse.get("references", [])
    } for pulse in data]

def parse_threatfox(data):
    return [{
        "source": "ThreatFox",
        "ioc": entry.get("ioc"),
        "threat_type": entry.get("threat_type"),
        "malware": entry.get("malware", "Unknown"),
        "tags": entry.get("tags", [])
    } for entry in data]

otx_parsed = parse_otx(otx_data)
tf_parsed = parse_threatfox(tf_data)

malware_counter = Counter()
tags_counter = Counter()
for item in otx_parsed + tf_parsed:
    malware = item.get("malware_family", item.get("malware", "Unknown"))
    malware_counter[malware] += 1
    tags_counter.update(item.get("tags", []))

# === HTML Report Generation ===
timestamp = datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')
html_content = f"""
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Daily Threat Report</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 40px; }}
        h1 {{ color: #333; }}
        h2 {{ margin-top: 30px; color: #555; }}
        ul {{ margin-bottom: 20px; }}
        .section {{ margin-bottom: 40px; }}
        .meta {{ font-size: 0.9em; color: #777; }}
    </style>
</head>
<body>
    <h1>üõ°Ô∏è Daily Threat Intelligence Report</h1>
    <p class="meta">Generated: {timestamp}</p>

    <div class="section">
        <h2>üîç Summary</h2>
        <ul>
            <li>Total OTX Pulses: {len(otx_data)}</li>
            <li>Total ThreatFox IOCs: {len(tf_data)}</li>
            <li>Total AbuseIPDB Records: {len(abuse_data)}</li>
        </ul>
    </div>

    <div class="section">
        <h2>üß¨ Top Malware Families</h2>
        <ul>
            {''.join(f'<li>{m}: {c}</li>' for m, c in malware_counter.most_common(10))}
        </ul>
    </div>

    <div class="section">
        <h2>üè∑Ô∏è Top Tags</h2>
        <ul>
            {''.join(f'<li>{tag}: {count}</li>' for tag, count in tags_counter.most_common(10))}
        </ul>
    </div>

    <div class="section">
        <h2>üìå Sample ThreatFox IOCs</h2>
        <ul>
            {''.join(f'<li>{entry["ioc"]} ({entry.get("threat_type")})</li>' for entry in tf_parsed[:10])}
        </ul>
    </div>

    <div class="section">
        <h2>üìå Sample OTX References</h2>
        <ul>
            {''.join(f'<li>{ref}</li>' for pulse in otx_parsed[:5] for ref in pulse.get("references", [])[:2])}
        </ul>
    </div>

    <footer>
        <p class="meta">Auto-generated by CTI Tools V2.</p>
    </footer>
</body>
</html>
"""

with open(html_path, "w", encoding="utf-8") as f:
    f.write(html_content)

print(f"[+] HTML report saved to: {html_path}")
