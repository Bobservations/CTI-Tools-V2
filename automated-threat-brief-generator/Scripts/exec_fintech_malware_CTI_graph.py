import os
import json
import glob
from collections import Counter
from pathlib import Path
import matplotlib.pyplot as plt
import networkx as nx

# === Paths ===
script_path = Path(__file__).resolve()
base_path = script_path.parent.parent  # Takes us to .../automated-threat-brief-generator
data_path = base_path / "data"

# === Load Today's Feed Data ===
def get_latest_file(prefix):
    files = sorted(data_path.glob(f"{prefix}_*.json"), key=os.path.getmtime, reverse=True)
    return files[0] if files else None

def load_json(filepath):
    with open(filepath, "r", encoding="utf-8") as f:
        return json.load(f)

# Extract malware names from OTX and ThreatFox
def extract_malware_from_feeds():
    otx_data = load_json(get_latest_file("otx")) or []
    threatfox_data = load_json(get_latest_file("threatfox")) or []

    malware_seen = set()
    for item in otx_data:
        name = item.get("malware_family")
        if name and name.lower() != "unknown":
            malware_seen.add(name.strip())
    for item in threatfox_data:
        name = item.get("malware")
        if name and name.lower() != "unknown":
            malware_seen.add(name.strip())
    return malware_seen

# === Load MITRE Mapping ===
def load_latest_mitre_mapping():
    files = sorted(data_path.glob("malware_mitre_mapping_*.json"), key=os.path.getmtime, reverse=True)
    if not files:
        print("[-] No MITRE mapping file found.")
        exit(1)
    with open(files[0], "r", encoding="utf-8") as f:
        return json.load(f)

# === Techniques of interest to financials ===
FINANCIAL_TECHNIQUES = [
    "Credential Dumping",
    "Valid Accounts",
    "Phishing",
    "Spearphishing Attachment",
    "System Information Discovery",
    "Remote Access Tools",
    "Command and Scripting Interpreter",
    "Application Layer Protocol",
    "Remote System Discovery",
    "Data Staged",
    "Scheduled Task/Job",
    "Web Service",
    "Boot or Logon Autostart Execution",
    "Keylogging",
    "Clipboard Data",
    "Obfuscated Files or Information",
    "Data Encrypted for Impact"
]

# === Filtered Graph Builder ===
def build_filtered_graph(mapping_data, observed_malware):
    filtered = {}
    for entry in mapping_data:
        malware = entry.get("malware", "").strip()
        if malware not in observed_malware:
            continue
        matched = [t for t in entry.get("techniques", []) if any(fin in t for fin in FINANCIAL_TECHNIQUES)]
        if matched:
            filtered[malware] = matched

    # Limit to top 20 by number of relevant techniques
    top_20 = dict(sorted(filtered.items(), key=lambda x: len(x[1]), reverse=True)[:20])
    return top_20

# === Draw graph ===
def draw_graph(malware_to_techniques):
    G = nx.DiGraph()

    for malware, techniques in malware_to_techniques.items():
        for tech in techniques:
            G.add_edge(malware, tech)

    pos = nx.spring_layout(G, k=0.8)
    plt.figure(figsize=(16, 10))

    # Color nodes by type
    node_colors = []
    for node in G.nodes():
        if any(fin in node for fin in FINANCIAL_TECHNIQUES):
            node_colors.append('lightcoral')  # Technique
        else:
            node_colors.append('lightgreen')  # Malware

    nx.draw_networkx_nodes(G, pos, node_color=node_colors, node_size=1500, alpha=0.9)
    nx.draw_networkx_edges(G, pos, arrowstyle='->', arrowsize=12, edge_color='gray', width=1.5)
    nx.draw_networkx_labels(G, pos, font_size=9, font_weight='bold')

    plt.title("ðŸ’¼ Malware Impacting Financials: MITRE Technique Relationships", fontsize=14, fontweight='bold')
    plt.axis('off')
    plt.tight_layout()
    plt.show()

# === Run ===
if __name__ == "__main__":
    print("[*] Extracting today's malware...")
    observed = extract_malware_from_feeds()
    print(f"[+] Found {len(observed)} malware families in today's feed.")

    print("[*] Loading MITRE mapping...")
    mapping = load_latest_mitre_mapping()

    print("[*] Building filtered graph...")
    graph_data = build_filtered_graph(mapping, observed)

    if not graph_data:
        print("[-] No matching financial-impact techniques found.")
        exit(0)

    print("[+] Rendering executive graph...")
    draw_graph(graph_data)
