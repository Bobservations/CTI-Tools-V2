import os
import json
import glob
from collections import Counter, defaultdict
from pathlib import Path
from datetime import datetime
import matplotlib.pyplot as plt
import networkx as nx

# === Paths ===
script_path = Path(__file__).resolve()
base_path = script_path.parent.parent  # Takes us to .../automated-threat-brief-generator
data_path = base_path / "data"


# 1. Locate latest mapping file
mapping_files = sorted(data_path.glob("malware_mitre_mapping_*.json"), key=os.path.getmtime, reverse=True)
if not mapping_files:
    print("[-] No MITRE mapping files found in /data/")
    exit(1)

latest_mapping_file = mapping_files[0]

# 2. Load data
with open(latest_mapping_file, "r", encoding="utf-8") as f:
    mapping_data = json.load(f)

# 3. Count top techniques and prepare malware-to-technique edges
technique_counter = Counter()
malware_edges = []

for entry in mapping_data:
    malware = entry.get("malware", "unknown")
    techniques = entry.get("techniques", [])
    for tech in techniques:
        technique_counter[tech] += 1
        malware_edges.append((malware, tech))

# 4. Plotting
fig, axs = plt.subplots(1, 2, figsize=(18, 8))

# A. Left: Bar chart of top 15 MITRE techniques
top_techniques = technique_counter.most_common(15)
if top_techniques:
    techniques, counts = zip(*top_techniques)
    axs[0].barh(techniques, counts, color='skyblue')
    axs[0].invert_yaxis()
    axs[0].set_xlabel("Malware Mapped Count")
    axs[0].set_title("Top 15 MITRE ATT&CK Techniques")
    for i, v in enumerate(counts):
        axs[0].text(v + 0.2, i, str(v), va='center')
else:
    axs[0].text(0.5, 0.5, "No techniques to plot", ha='center')

# B. Right: Malware to technique network
G = nx.DiGraph()
G.add_edges_from(malware_edges)

# Only show part of the graph (limit nodes for performance)
subgraph_nodes = set()
for malware, tech in malware_edges:
    if technique_counter[tech] >= 2:  # Filter noise
        subgraph_nodes.add(malware)
        subgraph_nodes.add(tech)

subG = G.subgraph(subgraph_nodes)

pos = nx.spring_layout(subG, k=0.6)
nx.draw(subG, pos, with_labels=True, node_color='lightgreen', node_size=1000, font_size=8, ax=axs[1])
axs[1].set_title("Malware â†’ MITRE Technique Relationships")

plt.tight_layout()
plt.show()
