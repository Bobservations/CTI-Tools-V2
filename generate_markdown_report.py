import os
import json
import glob
from datetime import datetime
from collections import Counter
from datetime import datetime
from pathlib import Path

# Load the most recent MITRE malware mapping
def load_latest_mapping():
    mapping_files = glob.glob("../../data/malware_mitre_mapping_*.json")
    if not mapping_files:
        return []
    latest_file = max(mapping_files, key=os.path.getctime)
    with open(latest_file, "r", encoding="utf-8") as f:
        return json.load(f)

mitre_mapping = load_latest_mapping()

def get_mitre_techniques_for_malware(malware_name):
    for entry in mitre_mapping:
        if malware_name.lower() in entry["malware"].lower():
            return entry["techniques"]
    return []


# Paths
base = Path("C:/Users/<USER>/Documents/CTI GIT Project/CTI-Tools-V2/automated-threat-brief-generator")
data_dir = base / "data"
report_dir = base / "reports"
report_dir.mkdir(parents=True, exist_ok=True)

def get_latest_file(prefix):
    files = sorted(data_dir.glob(f"{prefix}_*.json"), key=os.path.getmtime, reverse=True)
    return files[0] if files else None

def load_json(filepath):
    with open(filepath, "r", encoding="utf-8") as f:
        return json.load(f)

def parse_otx(data):
    threats = []
    for pulse in data:
        threats.append({
            "source": "OTX",
            "name": pulse.get("name"),
            "malware_family": pulse.get("malware_family", "Unknown"),
            "tags": pulse.get("tags", []),
            "references": pulse.get("references", [])
        })
    return threats

def parse_threatfox(data):
    threats = []
    for entry in data:
        threats.append({
            "source": "ThreatFox",
            "ioc": entry.get("ioc"),
            "threat_type": entry.get("threat_type"),
            "malware": entry.get("malware", "Unknown"),
            "confidence_level": entry.get("confidence_level", 0),
            "tags": entry.get("tags", [])
        })
    return threats

# Load and parse
otx_data = parse_otx(load_json(get_latest_file("otx")))
threatfox_data = parse_threatfox(load_json(get_latest_file("threatfox")))

# Aggregate
malware_counter = Counter()
tags_counter = Counter()
for item in otx_data + threatfox_data:
    malware = item.get("malware_family", item.get("malware", "Unknown"))
    malware_counter[malware] += 1
    tags_counter.update(item.get("tags", []))

# Report content
timestamp = datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')
report_lines = [
    f"# Daily Threat Intelligence Report\n",
    f"**Generated:** {timestamp}\n",
    "## üîç Summary",
    f"- Total OTX Pulses: {len(otx_data)}",
    f"- Total ThreatFox IOCs: {len(threatfox_data)}\n",
    "## üß¨ Top Malware Families",
    *[f"- {malware}: {count}" for malware, count in malware_counter.most_common(10)],
    "\n## üè∑Ô∏è Top Tags",
    *[f"- {tag}: {count}" for tag, count in tags_counter.most_common(10)],
    "\n## üìå Sample ThreatFox IOCs",
    *[f"- {entry['ioc']} ({entry.get('threat_type')}) [Confidence: {entry.get('confidence_level')}]" for entry in threatfox_data[:10]],
    "\n## üìå Sample OTX References",
    *[f"- {ref}" for pulse in otx_data[:5] for ref in pulse.get("references", [])[:2]],
    "\n---\n## üîç MITRE Mappings"
]

malware_seen = set()
for src in [otx_data, threatfox_data]:
    for item in src:
        malware_name = item.get("malware_family") or item.get("malware") or "Unknown"

        # Only skip if it's an empty string or exact duplicate (don't skip "Unknown")
        if not malware_name.strip() or malware_name in malware_seen:
            continue

        malware_seen.add(malware_name)
        techniques = get_mitre_techniques_for_malware(malware_name)

        report_lines.append(f"\n### {malware_name}")
        if techniques:
            for t in techniques:
                report_lines.append(f"- {t}")
        else:
            report_lines.append("- _No mapped MITRE techniques found_")


report_lines.append("\n---\n_Report auto-generated by CTI Tools V2._")

# Save
report_filename = f"threat_report_{datetime.utcnow().strftime('%Y-%m-%d')}_v2.md"
report_path = report_dir / report_filename
with open(report_path, "w", encoding="utf-8") as f:
    f.write("\n".join(report_lines))

print(f"[+] Report saved to: {report_path}")
